#!/bin/bash
# sudo ./export_data
# sudo ./export_data -a -b -c -d
source src/GLOBAL_VARS.sh

# First define globals that are also used at source imports.
SNAP_DATA=/var/snap/nextcloud/current/
MYSQL_ROOT_OPTION_FILE="$SNAP_DATA/mysql/root.ini"
CUSTOM_NEXTCLOUD_DATADIR="/var/snap/nextcloud/common/nextcloud/data"

COMMAND="nextcloud.export"
FORMAT="1"

source src/backup/nextcloud_utilities
source src/backup/common_utilities
# if [ "$(id -u)" -ne 0 ]; then
# echo "This utility needs to run as root"
# exit 1
# fi

# Used.
print_usage() {
  echo "Usage:"
  echo "    $COMMAND [OPTIONS]"
  echo "    Export data suitable for migrating servers. By default this"
  echo "    includes the Nextcloud database, configuration, and data"
  echo "    (equivalent to running $COMMAND -abcd)."
  echo ""
  echo "Available options:"
  echo "    -h: Display this help message"
  echo "    -a: Include the (non-default) apps"
  echo "    -b: Include the database"
  echo "    -c: Include the config"
  echo "    -d: Include the data (can be quite large)"
}

# Used.
export_apps() {
  backup="$1"
  echo "Exporting apps..."
  if ! rsync -ah --info=progress2 "$SNAP_DATA/nextcloud/extra-apps/" "${backup}/apps"; then
    echo "Unable to export apps"
    exit 1
  fi
}

# Used.
export_database() {
  backup="$1"
  echo "Exporting database..."
  # if ! mysqldump --defaults-file="$MYSQL_ROOT_OPTION_FILE" \
  if ! mysqldump --single-transaction -h 127.0.0.1 -u root -pmysql_password nextcloud >"${backup}/database.sql"; then
    echo "Unable to export database"
    exit 1
  fi
}

# Used.
export_config() {
  backup="$1"
  config_backup="${backup}/config.php"

  # Mask out the config password. We don't need it when restoring.
  echo "Exporting config..."
  if ! sed "s/\(dbpassword.*=>\s*\).*,/\1'DBPASSWORD',/" \
    "${SNAP_DATA}/nextcloud/config/config.php" >"$config_backup"; then
    echo "Unable to export config"
    exit 1
  fi
}

# Used.
export_data() {
  backup="$1"
  echo "Exporting data..."
  # if ! rsync -ah --info=progress2 "${NEXTCLOUD_DATA_DIR%/}/" "${backup}/data"; then
  if ! rsync -ah --info=progress2 "$CUSTOM_NEXTCLOUD_DATADIR/" "${backup}/data"; then
    echo "Unable to export data"
    exit 1
  fi
}

backup_dir_to_tar_gz() {
  local backup_path="$1"
  local backup_extention_wo_dot="$2"
  # Zip the backup folder into a .tar.gz file, and delete the original folder.
  if [ -d "$backup_path" ]; then

    # The last folder in the backup path is the filename of the new tar.gz.
    local last_folder_in_path=$(basename "${backup_path%/}")
    local path_without_last_folder=$(dirname "${backup_path}")
    tar -czvf "$backup_path.tar.gz" -C "$path_without_last_folder" "$last_folder_in_path" >/dev/null 2>&1
    if [ -f "$backup_path.$backup_extention_wo_dot" ]; then
      rm -r "$backup_path"
    else
      echo "Error, .$backup_extention_wo_dot of backup folder not found."
      exit
    fi
  else
    echo "Error, backup directory does not exist."
    exit
  fi
  if [ -d "$backup_path" ]; then
    echo "Error, backup directory still exists."
    exit
  fi
}

do_export_apps=false
do_export_database=false
do_export_config=false
do_export_data=false

# If no parameters are specified, default to exporting everything
if [ $# -eq 0 ]; then
  do_export_apps=true
  do_export_database=true
  do_export_config=true
  do_export_data=true
fi

while getopts ":abcdh" opt; do
  case $opt in
    a)
      do_export_apps=true
      ;;
    b)
      do_export_database=true
      ;;
    c)
      do_export_config=true
      ;;
    d)
      do_export_data=true
      ;;
    h)
      print_usage
      exit 0
      ;;
    \?)
      echo "Invalid option: -$OPTARG" >&2
      exit 1
      ;;
  esac
done

# Clear options
shift "$((OPTIND - 1))"

echo "WARNING: This functionality is still experimental and under" >&2
echo "development, use at your own risk. Note that the CLI interface is" >&2
echo "unstable, so beware if using from within scripts." >&2
echo "" >&2

backup="$BACKUP_PATH/$(date +%Y%m%d-%H%M%S)"

mkdir -p "$backup"
chmod 750 "$backup"

echo "$FORMAT" >"${backup}/format"

# Enable maintenance mode so data can't change out from under us
#sudo nextcloud.occ maintenance:mode --on
if ! enable_maintenance_mode; then
  echo "Unable to enter maintenance mode"
  exit 1
fi
trap 'disable_maintenance_mode' EXIT

if [ "$do_export_apps" = true ]; then
  export_apps "$backup"
fi

if [ "$do_export_database" = true ]; then
  export_database "$backup"
fi

if [ "$do_export_config" = true ]; then
  export_config "$backup"
fi

if [ "$do_export_data" = true ]; then
  export_data "$backup"
fi

# Remove sudo permission requirement from backup files.
sudo chmod 777 $backup/*
backup_dir_to_tar_gz "$backup" "$BACKUP_EXTENSION_WO_DOT"

echo ""
echo "Successfully exported $backup"
