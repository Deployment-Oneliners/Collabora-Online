#!/bin/bash
# sudo ./import_data /home/name/git/backup0/20230523-212316

# First define globals that are also used at source imports.
SNAP_DATA=/var/snap/nextcloud/current/
MYSQL_ROOT_OPTION_FILE="$SNAP_DATA/mysql/root.ini"
CUSTOM_NEXTCLOUD_DATADIR="/var/snap/nextcloud/common/nextcloud/data"
COMMAND="nextcloud.import"

source "nextcloud_utilities"
# shellcheck source=src/mysql/utilities/mysql-utilities
source "mysql_utilities"
source common_utilities

if [ "$(id -u)" -ne 0 ]; then
  echo "This utility needs to run as root"
  exit 1
fi

# Used.
print_usage() {
  echo "Usage:"
  echo "    $COMMAND [OPTIONS] <backup dir>"
  echo "    Import data exported from another Nextcloud snap instance."
  echo "    By default this imports the database, config, and data"
  echo "    (equivalent to running $COMMAND -abcd)."
  echo ""
  echo "Available options:"
  echo "    -h: Display this help message"
  echo "    -a: Import the (non-default) apps"
  echo "    -b: Import the database"
  echo "    -c: Import the config"
  echo "    -d: Import the data"
}

# Used.
import_apps() {
  backup_dir="${1%/}"
  apps_backup="${backup_dir}/apps"
  run_command "Clearing existing non-default apps" rm -rf "$SNAP_DATA/nextcloud/extra-apps"
  echo "Importing apps..."
  if ! rsync -ah --info=progress2 "$apps_backup/" "$SNAP_DATA/nextcloud/extra-apps"; then
    echo "Unable to import apps"
    exit 1
  fi
}

# Used.
import_database() {
  backup_dir="$1"
  database_backup="${backup_dir}/database.sql"

  # First, drop the database (if any)
  run_command "Dropping existing database" mysql -h 127.0.0.1 -u root -pmysql_password -e "DROP DATABASE nextcloud"
  run_command "Creating new database" mysql -h 127.0.0.1 -u root -pmysql_password -e "CREATE DATABASE nextcloud CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci"

  # Now restore the database
  echo "Importing database..."
  # if ! mysql -h 127.0.0.1 -pmysql_password nextcloud < "$database_backup"; then
  if ! mysql -h 127.0.0.1 -u root -pmysql_password nextcloud <"$database_backup"; then
    echo "Unable to import database"
    exit 1
  fi
}

# Used.
import_config() {
  local backup_dir="$1"
  config_backup="${backup_dir}/config.php"
  database_password="$(mysql_get_nextcloud_password)"
  echo "database_password=$database_password"
  # Import the config, but set our new database password
  echo "Importing config:"
  read -p "$(cat $config_backup)"

  # replace the placeholder string "DBPASSWORD" in the file specified by $
  # config_backup with the value stored in the variable $database_password.
  # The updated content is then saved to the file
  # ${SNAP_DATA}/nextcloud/config/config.php. If any error occurs during this
  # process, the code block following then will be executed.
  if ! sed "s/DBPASSWORD/$database_password/" \
    "$config_backup" >"${SNAP_DATA}/nextcloud/config/config.php"; then
    # TODO: process the prior content of the $config_backup file.
    echo "Unable to import config"
    exit 1
  fi
}

# Used.
import_data() {
  backup_dir="${1%/}"
  data_backup="${backup_dir}/data"
  run_command "Clearing existing data" rm -rf "$CUSTOM_NEXTCLOUD_DATADIR"
  echo "Importing data..."
  if ! rsync -ah --info=progress2 "$data_backup/" "$CUSTOM_NEXTCLOUD_DATADIR"; then
    echo "Unable to import data"
    exit 1
  fi
}

do_import_apps=false
do_import_database=false
do_import_config=false
do_import_data=false

# If no parameters are specified, default to importing everything
if [ $# -eq 1 ]; then
  do_import_apps=true
  do_import_database=true
  do_import_config=true
  do_import_data=true
fi

while getopts ":abcdh" opt; do
  case $opt in
    a)
      do_import_apps=true
      ;;
    b)
      do_import_database=true
      ;;
    c)
      do_import_config=true
      ;;
    d)
      do_import_data=true
      ;;
    h)
      print_usage
      exit 0
      ;;
    \?)
      echo "Invalid option: -$OPTARG" >&2
      exit 1
      ;;
  esac
done

# Clear options
shift "$((OPTIND - 1))"

echo "WARNING: This functionality is still experimental and under" >&2
echo "development, use at your own risk. Note that the CLI interface is" >&2
echo "unstable, so beware if using from within scripts." >&2
echo "" >&2

# Enable maintenance mode so data can't change out from under us
if nextcloud_is_installed && ! enable_maintenance_mode; then
  echo "Unable to enter maintenance mode"
  exit 1
fi
trap 'disable_maintenance_mode' EXIT

backup_dir="$1"
if [ -z "$backup_dir" ]; then
  echo "Missing parameter <backup dir>"
  print_usage
  exit 1
fi

if [ "$do_import_apps" = true ]; then
  import_apps "$backup_dir"
fi

if [ "$do_import_database" = true ]; then
  import_database "$backup_dir"
fi

if [ "$do_import_config" = true ]; then
  import_config "$backup_dir"
  read -p "Re-enabled importing config."
fi

if [ "$do_import_data" = true ]; then
  import_data "$backup_dir"
fi
